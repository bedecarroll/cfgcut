# Builds and publishes the pycfgcut wheels/sdist independently from the cargo-dist release flow.

name: Python Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: read

jobs:
  python-artifacts:
    name: python (${{ matrix.os }} / py${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python-version: "3.12"
            python-arch: x64
            rust-target: ""
            build-args: ""
            produce-sdist: true
            artifact-name: wheels-linux-x86_64
          - os: macos-14
            python-version: "3.12"
            python-arch: arm64
            rust-target: ""
            build-args: ""
            produce-sdist: false
            artifact-name: wheels-macos-aarch64
          - os: macos-13
            python-version: "3.12"
            python-arch: x64
            rust-target: x86_64-apple-darwin
            build-args: "--target x86_64-apple-darwin"
            produce-sdist: false
            artifact-name: wheels-macos-x86_64
          - os: windows-latest
            python-version: "3.12"
            python-arch: x64
            rust-target: ""
            build-args: ""
            produce-sdist: false
            artifact-name: wheels-windows-x86_64

    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.90
          targets: ${{ matrix.rust-target }}

      - name: Cache cargo directories
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-python-wheels-${{ matrix.python-version }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-python-wheels-${{ matrix.python-version }}-
            ${{ runner.os }}-python-wheels-

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.python-arch }}
          cache: "pip"

      - name: Prepare virtualenv
        shell: bash
        run: |
          python -m venv .venv
          if [ -f .venv/Scripts/activate ]; then
            echo "VIRTUAL_ENV=$PWD/.venv" >> "$GITHUB_ENV"
            echo "$PWD/.venv/Scripts" >> "$GITHUB_PATH"
          else
            echo "VIRTUAL_ENV=$PWD/.venv" >> "$GITHUB_ENV"
            echo "$PWD/.venv/bin" >> "$GITHUB_PATH"
          fi

      - name: Install Python tooling
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install "maturin>=1.6,<2.0" pytest

      - name: Build extension in develop mode
        shell: bash
        run: |
          maturin develop --manifest-path crates/pycfgcut/Cargo.toml --release --locked ${{ matrix.build-args }}

      - name: Run pytest (editable build)
        shell: bash
        run: |
          pytest crates/pycfgcut/tests

      - name: Build wheel artifact
        shell: bash
        run: |
          rm -rf dist
          maturin build --manifest-path crates/pycfgcut/Cargo.toml --release --locked --out dist ${{ matrix.build-args }}

      - name: Build sdist
        if: matrix.produce-sdist
        shell: bash
        run: |
          maturin build --manifest-path crates/pycfgcut/Cargo.toml --release --locked --out dist --sdist

      - name: Install wheel
        shell: bash
        run: |
          python -m pip uninstall -y pycfgcut || true
          python -m pip install dist/pycfgcut-*.whl

      - name: Verify wheel import
        shell: bash
        run: |
          python - <<'PY'
          from importlib import metadata
          from pathlib import Path
          import pycfgcut

          assert metadata.version("pycfgcut") == pycfgcut.__version__
          fixture = Path("tests/fixtures/juniper_junos/sample.conf").resolve()
          res = pycfgcut.run_cfg(["interfaces|>>|"], [str(fixture)])
          assert res["matched"]
          PY

      - name: Run pytest (wheel install)
        shell: bash
        run: |
          pytest crates/pycfgcut/tests

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: dist

  publish-pypi:
    name: Publish to PyPI
    needs:
      - python-artifacts
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
    permissions:
      id-token: write
      actions: read
      contents: read
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true
      - name: Publish artifacts
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
